syntax = "proto3";
package pb;

// 表示目标文件生成的路径, go的包名就是最后的目录名
// 目前统一生成到 app/pb 目录下
option go_package = "../app/pb";

import "common.proto";
import "api_chatroom_background.proto";

enum SkinUseStatus {
  UnUse = 0;  // 未使用
  InUse = 1;  // 在使用中
}

// 查询用户的获得的下发皮肤列表
message ReqQueryUserRoomSkinList {
    // @gotags: v:"required|between:1,3"
    uint32 type  = 1;   // 皮肤类型 1:房间麦波;2:麦位皮肤;3:房间标题边框; 详见RoomSkinType
    PaginationParams page_info = 2; // 分页信息
    bool need_all_type_lastest_id = 3; // 是否需要返回所有类型皮肤最新的id，用户客户端红点展示
}

// 房间皮肤
message RoomSkin {
    int64  id          = 1;       // 数据记录id,自增
    int64  skin_id     = 2;       // 皮肤id
    string cover       = 3;       // 皮肤封面图片地址
    string img         = 4;       // 皮肤图片地址
    uint32 expire_time = 5;       // 过期时间的时间戳
    uint32  use_status = 6;        // 使用状态 1:在使用中, 未使用
}

// 标题边框皮肤
message TitleFrameSkin {
    int64  id               = 1;       // 数据记录id,自增
    int64  skin_id          = 2;       // 皮肤id
    string frame_color      = 3;       // 边框颜色
    string  title_left_img  = 4;       // 标题边框左半边图片
    string  title_right_img = 5;       // 标题边框右半边图片
    uint32 expire_time      = 6;       // 过期时间的时间戳
    uint32  use_status      = 7;       // 使用状态 1:在使用中, 未使用
    string cover            = 8;       // 皮肤封面图片地址
}

// 麦位皮肤
message MicSkin {
    int64  id          = 1;   // 数据记录id,自增
    int64  skin_id     = 2;   // 皮肤id
    string cover       = 3;   // 皮肤封面图片地址
    string no_mic_img  = 5;   // 空麦皮肤图片地址
    string lock_mic_img = 6;  // 锁麦皮肤图片地址
    string apply_mic_img = 7; // 申请上麦皮肤图片地址
    string frame_color   = 8; // 麦位边框颜色
    uint32 expire_time   = 9; // 过期时间的时间戳，如果是0代表永久有效
    uint32  use_status   = 10; // 使用状态 1:在使用中, 未使用
}

message RoomSkinData {
    optional RoomSkin       wave_skin        = 1; // 房间麦波
    optional MicSkin        mic_skin         = 2; // 麦位皮肤
    optional TitleFrameSkin title_frame_skin = 3; // 标题边框
}

message SkinTypeIdInfo {
    uint32 type       = 1;   // 皮肤类型 1:房间麦波;2:麦位皮肤;3:房间标题边框; 详见RoomSkinType
    int64  lastest_id = 2; // 当前类型的皮肤最新的一条记录id
}

message RspQueryUserRoomSkinList {
    CommonData common = 1;
    repeated RoomSkinData skin_list = 2; // 皮肤列表
    PaginationParams      page_info = 3; // 分页信息
    repeated SkinTypeIdInfo lastest_id_list = 4; // 各种皮肤最新id列表
}



// 使用皮肤
message ReqUseSkin {
    // @gotags: v:"required"
    int64 skin_id = 1;          // 皮肤id
    // @gotags: v:"required|between:1,2"
    uint32 operate_type = 2;   // 操作类型 1:使用皮肤； 2:取消使用
}

enum UseSkinOperateType {
    UnknownUseSkinOperateType = 0;
    UseOperateType   = 1; // 使用
    UnUseOperateType = 2; // 取消使用
}

message RspUseSkin {
  CommonData common = 1;
}

message RpcReqGetUserRoomWaveSkinImg {
    uint32 uid       = 1;
}

message RpcRspGetUserRoomWaveSkinImg {
    CommonData common = 1;
    string      img   = 2;
}

service SkinService {
    // go/room/skin/queryUserRoomSkinList 查询用户获取的房间皮肤列表
    rpc QueryUserRoomSkinList(ReqQueryUserRoomSkinList) returns(RspQueryUserRoomSkinList);
    // go/room/skin/useSkin  使用房间皮肤
    rpc UseSkin(ReqUseSkin) returns(RspUseSkin);
}