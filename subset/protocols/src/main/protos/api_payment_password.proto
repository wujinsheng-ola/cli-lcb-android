syntax = "proto3";
package pb;

option go_package = "../app/pb";
import "common.proto";

message ReqSendMailCode {
    // @gotags: v:"email"
    string mail = 1;
    uint32 type = 2; // 1：普通验证码，2：重试改绑验证码
}

message RspSendMailCode {
    CommonData common = 1;
    uint32 wait_hours = 2;  // 需要等待的小时
}


message ReqVerifyMailCode {
    // @gotags: v:"email"
    string mail = 1;
    // @gotags: v:"length:6,6"
    string verify_code = 2;
}

message ReqVerifyBindMailCode {
    // @gotags: v:"email"
    string mail = 1;
    // @gotags: v:"length:6,6"
    string verify_code = 2;
    // @gotags: v:"email"
    string new_mail = 3;  // 绑定新邮箱使用，要绑定的新邮箱
}

message ReqBindMail {
    // @gotags: v:"email"
    string mail = 1;
    // @gotags: v:"length:6,6"
    string verify_code = 2; // 新邮箱的验证码，6位数字的验证码
}

message ReqModifyMail {
    // @gotags: v:"email"
    string mail = 1;
    // @gotags: v:"length:6,6"
    string verify_code = 2; // 新邮箱的验证码，6位数字的验证码
}

message ReqModifyBindMail {
    // @gotags: v:"email"
    string mail = 1;
    // @gotags: v:"length:6,6"
    string verify_code = 2; // 新邮箱的验证码，6位数字的验证码
    // @gotags: v:"required"
    string token = 3; // 验证邮箱后的有效token
}

message ReqSetPassword {
    // @gotags: v:"length:40,40"
    string password = 1; // 密码的sha1值
}

message ReqVerifyPassword {
    // @gotags: v:"length:40,40"
    string password = 1; // 值为密码sha1后的pd,用(uid+pd+uid)在sha1后的数据
}

message VerifyPasswordData {
    uint32 remainder_count = 1; // 当天剩余输错次数
    uint32 wait_hours      = 2; // 当天输错次数达到限制后，需要等待多少小时后再重试
}

message RspVerifyPassword {
    CommonData common = 1;
    VerifyPasswordData data = 2;
}

message ReqModifyPassword {
    // @gotags: v:"length:40,40"
    string password    = 1; // 密码的sha1值
    // @gotags: v:"length:6,6"
    string verify_code = 2; // 邮箱验证码
    // @gotags: v:"email"
    string mail        = 3; // 邮箱地址
}

enum EmailBindStatus {
    EMAIL_BIND_STATUS_UNKNOWN = 0; // 未知
    EMAIL_BIND_STATUS_NO_EMAIL = 1; // 1:未设置邮箱
    EMAIL_BIND_STATUS_NO_PASSWORD = 2; // 2：未设置密码
    EMAIL_BIND_STATUS_DONE = 3; // 3，设置了邮箱和密码
    EMAIL_BIND_STATUS_NO_NEED = 4; // 不需要设置
}

enum EmailPasswordFlag {
    EmailPasswordUnknown = 0;
    SetPasswordClose = 1;      // 关闭设置支付密码开关
    SetEmailClose = 2;         // 关闭设置安全邮箱开关
}

message RspGetBindStatus {
    CommonData common = 1;
    uint32 status = 2; // 对应EmailBindStatus 绑定邮箱和设置密码的状态 1:未设置邮箱 2：未设置密码 3，完成了设置 4: 不需要设置
    string email = 3; // 用户邮箱
}

message ReqPayPasswordOperationUidList {
    // @gotags: v:"required"
    repeated uint32 uid_list = 1; // UID列表
}

message ReqPayPasswordOperationUidEmail {
    uint32 uid = 1; // UID
    // @gotags: v:"email"
    string email = 2; // email
}

enum PasswordStatus {
    NotSet = 0;  // 未设置或需要重置
    HasSet = 1;  // 已设置
}

// 安全账号接口
// 绑定邮箱和设置密码确认接口


service PaymentPasswordService {
    // /go/ps/payment_password/sendMailCode 发送邮箱验证码
    rpc SendMailCode (ReqSendMailCode) returns (RspSendMailCode);
    // /go/ps/payment_password/bindMail  通过验证码，首次绑定邮箱
    rpc BindMail (ReqBindMail) returns (RspCommon);
    // /go/ps/payment_password/verifyMailCode  验证邮箱验证码，修改密码使用
    rpc VerifyMailCode (ReqVerifyMailCode) returns (RspCommon);
    // /go/ps/payment_password/verifyBindMailCode   验证邮箱验证码，修改绑定邮箱使用
    rpc VerifyBindMailCode (ReqVerifyBindMailCode) returns (RspCommon);
    // /go/ps/payment_password/modifyMail  修改新邮箱
    rpc ModifyMail (ReqModifyMail) returns (RspCommon);

    // /go/ps/payment_password/setPassword
    rpc SetPassword (ReqSetPassword) returns (RspCommon);
    // /go/ps/payment_password/verifyPassword 验证支付密码
    rpc VerifyPassword (ReqVerifyPassword) returns (RspVerifyPassword);
    // /go/ps/payment_password/modifyPassword 重置支付密码
    rpc ModifyPassword (ReqModifyPassword) returns (RspCommon);

    // /go/ps/payment_password/getBindStatus 获取绑定状态
    rpc GetBindStatus (Empty) returns (RspGetBindStatus);
}